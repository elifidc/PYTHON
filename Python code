class Flower:
  color = 'unknown'

rose = Flower()
rose.color = "red"

violet = Flower()
violet.color = "blue"

this_pun_is_for_you = "Sugar is sweet, and so are you"

print("Roses are {},".format(rose.color))
print("violets are {},".format(violet.color))
print(this_pun_is_for_you)









def endangered_animals(animal_dict):
    result = ""
    # Complete the for loop to iterate through the key and value items
    # in the dictionary.
    for animal in animal_dict:
        # Use a string method to format the required string.
        result += animal + "\n"
    return result

print((endangered_animals({"Javan Rhinoceros":60, "Vaquita":10, "Mountain Gorilla":200, "Tiger":500})))



#We have two pieces of furniture. a brown wood table and a red leather couch
#Fill in blanks so that the describe_furniture function
#can format a sentence as follows "This piece of furniture is made of x and z"

class Furniture:
	color = ""
	material = ""

table = Furniture()

___

couch = Furniture()
___
___

def describe_furniture(piece):
	return ("This piece of furniture is made of {} {}".format(piece.color, piece.material))




#Let's make the method do something different depending on the ATTRIBUTE of an INSTANCE
class Piglet:
  name = "name"  #This line is similar to initializing?
  def speak(self):
    print("Oink! I'm {}! Oink!".format(self.name))
    #self.name format means it is accessing attribute of the name from line 2 of code
hamlet = Piglet()
hamlet.name = "Hamlet"
hamlet.speak()

petunia = Piglet()
petunia.name = "Petunia"
petunia.speak()



class Piglet:
  years = 0
  def pig_years(self):
    return self.years * 18
#Let's create an instance to use this function
piggy = Piglet()
print(piggy.pig_years())

piggy.years = 2
print(piggy.pig_years())



#CITY QUESTION
# define a basic city class
class City:
	name = ""
	country = ""
	elevation = 0
	population = 0

# create a new instance of the City class and
# define each attribute
city1 = City()
city1.name = "Cusco"
city1.country = "Peru"
city1.elevation = 3399
city1.population = 358052

# create a new instance of the City class and
# define each attribute
city2 = City()
city2.name = "Sofia"
city2.country = "Bulgaria"
city2.elevation = 2290
city2.population = 1241675
# create a new instance of the City class and
# define each attribute
city3 = City()
city3.name = "Seoul"
city3.country = "South Korea"
city3.elevation = 38
city3.population = 9733509

def max_elevation_city(min_population):
	# Initialize the variable that will hold
# the information of the city with
# the highest elevation
	return_city = City()


	# Evaluate the 1st instance to meet the requirements:
	# does city #1 have at least min_population and
	# is its elevation the highest evaluated so far?
	if city1.population >= min_population: #and city1.elevation > return_city.elevation:
		return_city = city1
	# Evaluate the 2nd instance to meet the requirements:
	# does city #2 have at least min_population and
	# is its elevation the highest evaluated so far?
	if city2.population >= min_population and city2.elevation > return_city.elevation:
		return_city = city2
	# Evaluate the 3rd instance to meet the requirements:
	# does city #3 have at least min_population and
	# is its elevation the highest evaluated so far?
	if city3.population >= min_population and city3.elevation > return_city.elevation:
		return_city = city3
 # return return_city
	#Format the return string
	if return_city.name:
		return return_city.name, return_city.country, return_city.elevation
	else:
		return ""

print(max_elevation_city(100000)) # Should print "Cusco, Peru"
print(max_elevation_city(1000000)) # Should print "Sofia, Bulgaria"
print(max_elevation_city(10000000)) # Should print ""







#Fill in blanks to complete the "multiplication_table" function. Function should
#print a multiplication table.
#"multiplication_table(1,3)" should print
#1 2 3
#2 4 6
#3 6 9

def multiplication_table(start, stop):
    # Complete the outer loop range
    for x in range(start, stop+1):
         # Complete the inner loop range
        for y in range(start, stop+1):
            # Prints the value of "x" multiplied by "y"
            # and inserts a space after each value
            print(str(x*y), end=" ")

        # An empty print() function inserts a line break at the
        # end of the row
        print()



multiplication_table(1, 3)






import random
randomlist = []
for i in range(0,15):
  n = random.randint(1,30)
  randomlist.append(n)
print(randomlist)

odd_number = 0
even_number = 0
for x in randomlist:
  if x % 2 != 0:
    odd_number += 1
  else:
    even_number += 1

print(odd_number, even_number)

















#Fill in blanks for countdown function. Should begin at the start variable
#and count down to 0.

def countdown(start):
    x = start
    if x > 0:
        return_string = "Counting down to 0: "
        while x >= 0: # Complete the while loop
            return_string += str(x) # Add the numbers to the "return_string"
            return_string += ","
            #if x > 0:
                #return_string += ","
            x = x-1 # Decrement the appropriate variable
    else:
        return_string = "Cannot count down to 0"
    return return_string


print(countdown(10)) # Should be "Counting down to 0: 10,9,8,7,6,5,4,3,2,1,0"










def even_numbers(first, last):
 # a = [number for number in range(first,last) if number % 2 == 0]
 # return a

  new_list = [number for number in range(first,last) if number % 2 == 0]
  return new_list







def setup_guests(guest_list):
    # loop over the guest list and add each guest to the dictionary with
    # an initial value of 0
    result = {}  # Initialize a new dictionary
    for guest in guest_list: # Iterate over the elements in the list
         result[guest] = 1 # Add each list element to the dictionary as a key with
            # the starting value of 0
    return result

guests = ["Adam","Camila","David","Jamal","Charley","Titus","Raj","Noemi","Sakira","Chidi"]

print(setup_guests(guests))





def count_numbers(text):
  # Initialize a new dictionary.
  dictionary = {}
  # Complete the for loop to iterate through each "text" character.
  for number in text:
    # Complete the if-statement using a string method to check if the
    # character is a number.
    if number.isnumeric():
      #print(number.isnumeric())
      # Complete the if-statement using a logical operator to check if
      # the number is not already in the dictionary.
      if number not in dictionary:
          dictionary[number] = 0
           # Use a dictionary operation to add the number as a key
           # and set the initial count value to zero.
      dictionary[number] += 1

      # Use a dictionary operation to increment the number count value
      # for the existing key.
     # ___
  return dictionary

#print(count_numbers("1001000111101"))
# Should be {'1': 7, '0': 6}

#print(count_numbers("Math is fun! 2+2=4"))
# Should be {'2': 2, '4': 1}

print(count_numbers("This is a sentence."))
# Should be {}

print(count_numbers("55 North Center Drive"))
# Should be {'5': 2}






"hello")

#for x in range(1):
#for y in range(3):
        #print("Hello " + str(x))
   # print(y)

#x = 0
#y = 0,1

#x = 1
#y = 0, 1

#x = 2
#y = 0,1

#x = 3
#y = 0, 1

#x= 4
#y = 0,1





#for x in range(1,4):
   # print("x= " + str(x))
   # for y in range(0,10,2):
        #print("y = " + str(y))



#for x in range (1,3):
    #print("x= " +str(x))
   #for y in range(1,4):
        #print("y= " +str(y))
        #for z in range (1,5):
            #print("z= "+ str(z))
       
        


#for x in range(1,4):
   # for y in range(x,5):
        #print(x,y)

#for left in range(2):
    #for right in range(left,7):
       # print("[" + str(left) + "|" + str(right) + "]",end =" ")
#print("[" + str(left) + "|" + str(right) + "]", end=" ")
    #print()


#for x in range(5):
    #print("This is the outer loop iteration number " + str(x))
    #for y in range(2):
       #print("Inner loop iteration number " + str(y))
    #print("Exit inner loop")
#print("The nested for loop has been completed.")




#for y in range(501):
   # if y % 2 == 0:
       # print(y)

#for x in range(20):
    #if x % 3 == 0:
       # print(x)

#for x in range(100):
   # if (x*3) > 20:
       # print(x*3)
 #   else:
      #  print("Value too small")


#for x in range(100):
  #  if x%5 == 0:
      #  print(x, x*5)

#for n in range(0,18+1,2):
    #print(n*2)

#CANT GET PAST ERROR IN THIS CODE
#def matrix(inital_number, end_of_first_row):
    #n1 = initial_number
    #n2 = end_of_first_row+1
    #for column in range(n1, n2):
        #for row in range(n1,n2):
          #  print(column*row,end=' ')
       # print()
#matrix(1,4)


#def count_by_ten(end):
 #   count = ""
   # for number in range(0, end+1,10):
      # count = count + str(number) + " "
   # return count

#print(count_by_ten(20))

#print(count_by_ten(10) + str(1))


#CODE WORKS BUT I AM LOST

#for outer_loop in range(10):
  #  outer = outer_loop
   # print("Outer is equal to:" + str(outer))
    ##input()
    #for inner_loop in range(outer_loop):
      #  print(inner_loop, end=" " )


#Able to fix this one
#for n in range(11, 0,-2):
    #if n % 2 != 0:
    #  print(n,end=" ")

#for n in range(11,0,-2):
       # print(n, end=" ")


#ABLE TO DO THIS
#starting_number = 15
#while starting_number >= 0:
   # print(starting_number, end=" ")
   # starting_number = starting_number - 3


#Using a while loop to count the number of digits in a number
   #Kind of understand kind of dont6
#def x_figure(salary):
   # tally = 0
     #if salary == 0:
       # tally += 1 #DO NOT UNDERSTAND PURPOSE OF LINE 130 AND 131
        #I removed both lines and ran code and it runs the same
  #  while salary >= 1:
     #   salary = salary/10
     #   tally += 1
  #  return tally
#print("The CEO has a " + str(x_figure(2300000))+ "-figure salary")

#column = 1
 #       row = 1 2 3 4
#column = 2
 #       row = 2 4 6 8
#column = 3
 #       row = 3 6 9 12
#column = 4
 #       row = 4 8 12 16



def student_grade(name, grade):
	return "{} received {}% on the exam.".format(name,grade)
print(student_grade("Reed", 80))



price = 7.5
with_tax = price *1.09 #tax rate of 9%
print("The price without tax is " + str(price) + " The price with tax is " + str(with_tax))



price = 7.5
with_tax = price *1.09 #tax rate of 9%
print("Base price: ${:.2f}. With Tax: ${:.2f}".format(price)

def to_celcius(x):
  return(x-32)*5/9
  for x in range (0, 101, 10):
    print("{:>3} F | {:>6.2f} C". format(x, to_celsius(x)))


def mirrored_string(my_string):
  forwards = ""
  backwards = ""
  for character in my_string:
    if character.isalpha():
      forwards += character
      backwards = character + backwards
    if forwards.lower() == backwards.lower():
      return True
    return false

  print(mirrored_string("12 Noon"))
  print(mirrored_string("Was it a car or a cat that I saw"))




def convert_weight(ounces):
  pounds = ounces/16
  result = "{} ounces equals {:.2f} pounds".format(ounces, pounds)
  return result

print(convert_weight(12))





def username(last_name,birth_year):
  return("{}{}".format(last_name[0:4],birth_year))
print(username("Danforth","1995"))
print(username("Yildirim","1999"))















