# -*- coding: utf-8 -*-
"""Stats Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y3g6KVRfEkCQp7rb6h_4ugINRWkiMEa2
"""

# https://www.kaggle.com/datasets/nasa/meteorite-landings

import pandas as pd
import numpy as np

df = pd.read_csv("meteorite-landings.csv")
print(df.shape)

df = df[df["recclass"] != "Unknown"]
df = df[df["mass"].notna()]

df = df[df["mass"] != 0]
# df["mass"] = np.log10(df["mass"] + 1)

print(df.shape)
print(df["recclass"].nunique())

df["custom_class"] = [recclass[0] for recclass in df["recclass"]]

s = set()
for recclass in df["recclass"]:
  if recclass[0] == "I" and recclass not in s:
    s.add(recclass)
    print(recclass)

temp = df["custom_class"].value_counts().sort_values(ascending=False).cumsum() / len(df)
temp.columns = ["cumulative_freq_perc"]
temp.head(5)

import seaborn as sns
import matplotlib.pyplot as plt

filtered_df = df[df["custom_class"].isin(["L", "H", "C", "E", "I"])]

plt.figure(figsize=(8, 6))
sns.boxplot(data=filtered_df, x="custom_class", y="mass", order=["L", "H", "C", "E", "I"])

plt.xlabel("Custom Class")
plt.ylabel("Mass (log scale)")
plt.title("Mass of Groups L, H, C, E, I")

plt.show()

df_mass = df.groupby(["custom_class"]).describe()["mass"]
df_mass = df_mass.loc[["L", "H", "C", "E", "I"]]
df_mass[["mean"]]

import matplotlib.pyplot as plt

count_values = df_mass["count"]

plt.figure(figsize=(8, 6))
count_values.plot(kind="bar")

plt.xticks(rotation=0)
plt.xlabel("Custom Class")
plt.ylabel("Frequency Counts")
plt.title("Count of Groups L, H, C, E, I")

plt.show()

import pandas as pd

df_groups = df.groupby(["custom_class"])

group_names = ["L", "H", "C", "E", "I"]
n_trials = 100
n_samples = 30

bootstrap_samples = []

for i in range(n_trials):
  temp = []
  for group_name in group_names:
    sample = df_groups.get_group(group_name)["mass"].sample(n=n_samples, replace=True)
    temp.append(sample.mean())

  bootstrap_samples.append(temp)

boot_strapped = pd.DataFrame(bootstrap_samples, columns = group_names)
boot_strapped_means = boot_strapped.describe().loc["mean"]

temp = []
for group_name in group_names:
  col = boot_strapped[group_name]
  lower_percentile = np.percentile(col, 2.5)   # 2.5th percentile
  upper_percentile = np.percentile(col, 97.5)  # 97.5th percentile

  ci = f"({lower_percentile:.3f}, {upper_percentile:.3f})"

  temp.append(ci)

ci_df = pd.DataFrame(temp, index=group_names)
ci_df.columns = ["ci"]
ci_df

res = df_mass[["mean"]].merge(boot_strapped_means, left_on="custom_class", right_index=True, how="left")
res = res.merge(ci_df, left_on="custom_class", right_index=True, how="left")
res.columns = ["mean", "bootstrap_mean", "ci"]
res



